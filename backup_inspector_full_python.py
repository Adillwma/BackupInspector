# Form implementation generated from reading ui file 'A:\Users\Ada\GitHub\BackupInspector\interface.ui'
#
# Created by: PyQt6 UI code generator 6.5.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1033, 712)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("A:\\Users\\Ada\\GitHub\\BackupInspector\\Icons/logo/BackupInspectorIcon.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setStyleSheet("*{\n"
"border: none;\n"
"background: transparent;\n"
"background-color: transparent;\n"
"padding: 0;\n"
"margin: 0;\n"
"color: #fff;\n"
"}\n"
"\n"
"#centralwidget{\n"
" background-color:#1f232a; \n"
" \n"
"}\n"
"\n"
"#leftMenuSubContainer{\n"
" background-color:#16191d;\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
" QPushButton[objectName*=\"_ProgramBtnType\"]{\n"
"background: fill;\n"
"background-color: #16191d;\n"
"padding: 0;\n"
"margin: 0;\n"
"}\n"
"\n"
"#leftMenuSubContainer QPushButton[objectName*=\"_UiBtnType\"]{\n"
" text-align: left;\n"
" padding: 2px 10px;\n"
" border-top-left-radius:10px;\n"
" border-bottom-left-radius:10px;\n"
"}\n"
"\n"
"#centerMenuSubContainer, #rightMenuSubContainer{\n"
" background-color: #2c313c;\n"
"}\n"
"\n"
"\n"
"\n"
"#frame_4, #frame8, #popupNotificationSubContainer{\n"
" background-color: #16191d;\n"
" border-radius: 10px;\n"
"}\n"
"\n"
"\n"
"#headerContainer, #footerContainer{\n"
"  background-color: #2c313c;\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"")
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.leftMenuContainer = QtWidgets.QWidget(parent=self.centralwidget)
        self.leftMenuContainer.setObjectName("leftMenuContainer")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.leftMenuContainer)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.leftMenuSubContainer = QtWidgets.QWidget(parent=self.leftMenuContainer)
        self.leftMenuSubContainer.setObjectName("leftMenuSubContainer")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.leftMenuSubContainer)
        self.verticalLayout_2.setContentsMargins(5, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame = QtWidgets.QFrame(parent=self.leftMenuSubContainer)
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_2.setContentsMargins(0, 5, 0, 10)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.leftMenuBtn_UiBtnType = QtWidgets.QPushButton(parent=self.frame)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/align-justify.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.leftMenuBtn_UiBtnType.setIcon(icon1)
        self.leftMenuBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.leftMenuBtn_UiBtnType.setCheckable(False)
        self.leftMenuBtn_UiBtnType.setObjectName("leftMenuBtn_UiBtnType")
        self.horizontalLayout_2.addWidget(self.leftMenuBtn_UiBtnType)
        self.verticalLayout_2.addWidget(self.frame, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.frame_2 = QtWidgets.QFrame(parent=self.leftMenuSubContainer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.frame_2)
        self.verticalLayout_3.setContentsMargins(0, 10, 0, 10)
        self.verticalLayout_3.setSpacing(0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.homeBtn_UiBtnType = QtWidgets.QPushButton(parent=self.frame_2)
        self.homeBtn_UiBtnType.setStyleSheet("background-color: #1f232a;")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/home.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.homeBtn_UiBtnType.setIcon(icon2)
        self.homeBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.homeBtn_UiBtnType.setCheckable(False)
        self.homeBtn_UiBtnType.setObjectName("homeBtn_UiBtnType")
        self.verticalLayout_3.addWidget(self.homeBtn_UiBtnType)
        self.dataBtn_UiBtnType = QtWidgets.QPushButton(parent=self.frame_2)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/trending-up.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.dataBtn_UiBtnType.setIcon(icon3)
        self.dataBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.dataBtn_UiBtnType.setCheckable(False)
        self.dataBtn_UiBtnType.setObjectName("dataBtn_UiBtnType")
        self.verticalLayout_3.addWidget(self.dataBtn_UiBtnType)
        self.reportBtn_UiBtnType = QtWidgets.QPushButton(parent=self.frame_2)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/printer.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.reportBtn_UiBtnType.setIcon(icon4)
        self.reportBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.reportBtn_UiBtnType.setCheckable(False)
        self.reportBtn_UiBtnType.setObjectName("reportBtn_UiBtnType")
        self.verticalLayout_3.addWidget(self.reportBtn_UiBtnType)
        self.verticalLayout_2.addWidget(self.frame_2, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_2.addItem(spacerItem)
        self.frame_3 = QtWidgets.QFrame(parent=self.leftMenuSubContainer)
        self.frame_3.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_4.setContentsMargins(0, 10, 0, 10)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.settingsBtn_UiBtnType = QtWidgets.QPushButton(parent=self.frame_3)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/settings.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.settingsBtn_UiBtnType.setIcon(icon5)
        self.settingsBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.settingsBtn_UiBtnType.setCheckable(False)
        self.settingsBtn_UiBtnType.setObjectName("settingsBtn_UiBtnType")
        self.verticalLayout_4.addWidget(self.settingsBtn_UiBtnType)
        self.infoBtn_UiBtnType = QtWidgets.QPushButton(parent=self.frame_3)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/info.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.infoBtn_UiBtnType.setIcon(icon6)
        self.infoBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.infoBtn_UiBtnType.setCheckable(False)
        self.infoBtn_UiBtnType.setObjectName("infoBtn_UiBtnType")
        self.verticalLayout_4.addWidget(self.infoBtn_UiBtnType)
        self.helpBtn_UiBtnType = QtWidgets.QPushButton(parent=self.frame_3)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/help-circle.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.helpBtn_UiBtnType.setIcon(icon7)
        self.helpBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.helpBtn_UiBtnType.setCheckable(False)
        self.helpBtn_UiBtnType.setObjectName("helpBtn_UiBtnType")
        self.verticalLayout_4.addWidget(self.helpBtn_UiBtnType)
        self.verticalLayout_2.addWidget(self.frame_3, 0, QtCore.Qt.AlignmentFlag.AlignBottom)
        self.verticalLayout.addWidget(self.leftMenuSubContainer, 0, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.horizontalLayout.addWidget(self.leftMenuContainer)
        self.centerMenuContainer = QtWidgets.QWidget(parent=self.centralwidget)
        self.centerMenuContainer.setMinimumSize(QtCore.QSize(0, 0))
        self.centerMenuContainer.setObjectName("centerMenuContainer")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centerMenuContainer)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.centerMenuSubContainer = QtWidgets.QWidget(parent=self.centerMenuContainer)
        self.centerMenuSubContainer.setMinimumSize(QtCore.QSize(200, 0))
        self.centerMenuSubContainer.setObjectName("centerMenuSubContainer")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.centerMenuSubContainer)
        self.verticalLayout_6.setContentsMargins(5, 5, 5, 5)
        self.verticalLayout_6.setSpacing(5)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame_4 = QtWidgets.QFrame(parent=self.centerMenuSubContainer)
        self.frame_4.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.label = QtWidgets.QLabel(parent=self.frame_4)
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout_3.addWidget(self.label)
        self.centerMenuCloseBtn_UiBtnType = QtWidgets.QPushButton(parent=self.frame_4)
        self.centerMenuCloseBtn_UiBtnType.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/x-circle.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.centerMenuCloseBtn_UiBtnType.setIcon(icon8)
        self.centerMenuCloseBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.centerMenuCloseBtn_UiBtnType.setCheckable(False)
        self.centerMenuCloseBtn_UiBtnType.setObjectName("centerMenuCloseBtn_UiBtnType")
        self.horizontalLayout_3.addWidget(self.centerMenuCloseBtn_UiBtnType, 0, QtCore.Qt.AlignmentFlag.AlignRight)
        self.verticalLayout_6.addWidget(self.frame_4, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.centerMenuPagesStack = QtWidgets.QStackedWidget(parent=self.centerMenuSubContainer)
        self.centerMenuPagesStack.setObjectName("centerMenuPagesStack")
        self.settingsCenterMenuPage = QtWidgets.QWidget()
        self.settingsCenterMenuPage.setObjectName("settingsCenterMenuPage")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.settingsCenterMenuPage)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.label_2 = QtWidgets.QLabel(parent=self.settingsCenterMenuPage)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_7.addWidget(self.label_2, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.settingsContainer = QtWidgets.QWidget(parent=self.settingsCenterMenuPage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.settingsContainer.sizePolicy().hasHeightForWidth())
        self.settingsContainer.setSizePolicy(sizePolicy)
        self.settingsContainer.setObjectName("settingsContainer")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout(self.settingsContainer)
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.widget = QtWidgets.QWidget(parent=self.settingsContainer)
        self.widget.setObjectName("widget")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_16 = QtWidgets.QLabel(parent=self.widget)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_13.addWidget(self.label_16)
        self.themesListSelector = QtWidgets.QComboBox(parent=self.widget)
        self.themesListSelector.setObjectName("themesListSelector")
        self.themesListSelector.addItem("")
        self.themesListSelector.addItem("")
        self.horizontalLayout_13.addWidget(self.themesListSelector, 0, QtCore.Qt.AlignmentFlag.AlignRight)
        self.verticalLayout_22.addWidget(self.widget)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_22.addItem(spacerItem1)
        self.verticalLayout_7.addWidget(self.settingsContainer)
        self.centerMenuPagesStack.addWidget(self.settingsCenterMenuPage)
        self.helpCenterMenuPage = QtWidgets.QWidget()
        self.helpCenterMenuPage.setObjectName("helpCenterMenuPage")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.helpCenterMenuPage)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.label_4 = QtWidgets.QLabel(parent=self.helpCenterMenuPage)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_4.setFont(font)
        self.label_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_9.addWidget(self.label_4)
        self.centerMenuPagesStack.addWidget(self.helpCenterMenuPage)
        self.infoCenterMenuPage = QtWidgets.QWidget()
        self.infoCenterMenuPage.setObjectName("infoCenterMenuPage")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.infoCenterMenuPage)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.label_3 = QtWidgets.QLabel(parent=self.infoCenterMenuPage)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.verticalLayout_8.addWidget(self.label_3)
        self.centerMenuPagesStack.addWidget(self.infoCenterMenuPage)
        self.verticalLayout_6.addWidget(self.centerMenuPagesStack)
        self.verticalLayout_5.addWidget(self.centerMenuSubContainer, 0, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.horizontalLayout.addWidget(self.centerMenuContainer)
        self.mainBodyContainer = QtWidgets.QWidget(parent=self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainBodyContainer.sizePolicy().hasHeightForWidth())
        self.mainBodyContainer.setSizePolicy(sizePolicy)
        self.mainBodyContainer.setStyleSheet("")
        self.mainBodyContainer.setObjectName("mainBodyContainer")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.mainBodyContainer)
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.headerContainer = QtWidgets.QWidget(parent=self.mainBodyContainer)
        self.headerContainer.setObjectName("headerContainer")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.headerContainer)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.frame_5 = QtWidgets.QFrame(parent=self.headerContainer)
        self.frame_5.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_5 = QtWidgets.QLabel(parent=self.frame_5)
        self.label_5.setMaximumSize(QtCore.QSize(40, 40))
        self.label_5.setAutoFillBackground(False)
        self.label_5.setText("")
        self.label_5.setPixmap(QtGui.QPixmap("A:\\Users\\Ada\\GitHub\\BackupInspector\\../../Desktop/BackupInspectorIconR.png"))
        self.label_5.setScaledContents(True)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_7.addWidget(self.label_5)
        self.label_6 = QtWidgets.QLabel(parent=self.frame_5)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_7.addWidget(self.label_6)
        self.horizontalLayout_5.addWidget(self.frame_5, 0, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.frame_6 = QtWidgets.QFrame(parent=self.headerContainer)
        self.frame_6.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_6)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setSpacing(0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.uiThemeBtn_UiBtnType = QtWidgets.QPushButton(parent=self.frame_6)
        self.uiThemeBtn_UiBtnType.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/sun.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        icon9.addPixmap(QtGui.QPixmap(":/blackicons/icons/dark/moon.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.On)
        self.uiThemeBtn_UiBtnType.setIcon(icon9)
        self.uiThemeBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.uiThemeBtn_UiBtnType.setCheckable(True)
        self.uiThemeBtn_UiBtnType.setChecked(False)
        self.uiThemeBtn_UiBtnType.setObjectName("uiThemeBtn_UiBtnType")
        self.horizontalLayout_6.addWidget(self.uiThemeBtn_UiBtnType)
        self.horizontalLayout_5.addWidget(self.frame_6, 0, QtCore.Qt.AlignmentFlag.AlignRight)
        self.verticalLayout_10.addWidget(self.headerContainer, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.mainBodyContent = QtWidgets.QWidget(parent=self.mainBodyContainer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainBodyContent.sizePolicy().hasHeightForWidth())
        self.mainBodyContent.setSizePolicy(sizePolicy)
        self.mainBodyContent.setObjectName("mainBodyContent")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.mainBodyContent)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.mainContentsContainer = QtWidgets.QWidget(parent=self.mainBodyContent)
        self.mainContentsContainer.setObjectName("mainContentsContainer")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.mainContentsContainer)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.mainContentPagesStack = QtWidgets.QStackedWidget(parent=self.mainContentsContainer)
        self.mainContentPagesStack.setAutoFillBackground(False)
        self.mainContentPagesStack.setStyleSheet("")
        self.mainContentPagesStack.setObjectName("mainContentPagesStack")
        self.homePage = QtWidgets.QWidget()
        self.homePage.setObjectName("homePage")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.homePage)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.label_10 = QtWidgets.QLabel(parent=self.homePage)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.verticalLayout_16.addWidget(self.label_10, 0, QtCore.Qt.AlignmentFlag.AlignTop)
        self.mainProgramContainer = QtWidgets.QWidget(parent=self.homePage)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.mainProgramContainer.sizePolicy().hasHeightForWidth())
        self.mainProgramContainer.setSizePolicy(sizePolicy)
        self.mainProgramContainer.setAutoFillBackground(False)
        self.mainProgramContainer.setStyleSheet("")
        self.mainProgramContainer.setObjectName("mainProgramContainer")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.mainProgramContainer)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.widget_2 = QtWidgets.QWidget(parent=self.mainProgramContainer)
        self.widget_2.setAutoFillBackground(False)
        self.widget_2.setStyleSheet("")
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.MainProgramSubContainer = QtWidgets.QWidget(parent=self.widget_2)
        self.MainProgramSubContainer.setMinimumSize(QtCore.QSize(500, 400))
        self.MainProgramSubContainer.setMaximumSize(QtCore.QSize(500, 400))
        self.MainProgramSubContainer.setStyleSheet("")
        self.MainProgramSubContainer.setObjectName("MainProgramSubContainer")
        self.pushButton_6_ProgramBtnType = QtWidgets.QPushButton(parent=self.MainProgramSubContainer)
        self.pushButton_6_ProgramBtnType.setGeometry(QtCore.QRect(400, 140, 81, 21))
        self.pushButton_6_ProgramBtnType.setObjectName("pushButton_6_ProgramBtnType")
        self.groupBox = QtWidgets.QGroupBox(parent=self.MainProgramSubContainer)
        self.groupBox.setGeometry(QtCore.QRect(110, 220, 271, 101))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(parent=self.groupBox)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(10, 20, 251, 31))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.horizontalLayout_14.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_17 = QtWidgets.QLabel(parent=self.horizontalLayoutWidget_2)
        self.label_17.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_14.addWidget(self.label_17)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_14.addItem(spacerItem2)
        self.scanned_files_readoutcount = QtWidgets.QLCDNumber(parent=self.horizontalLayoutWidget_2)
        self.scanned_files_readoutcount.setSmallDecimalPoint(False)
        self.scanned_files_readoutcount.setSegmentStyle(QtWidgets.QLCDNumber.SegmentStyle.Flat)
        self.scanned_files_readoutcount.setObjectName("scanned_files_readoutcount")
        self.horizontalLayout_14.addWidget(self.scanned_files_readoutcount)
        self.horizontalLayoutWidget = QtWidgets.QWidget(parent=self.groupBox)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 60, 251, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.label_18 = QtWidgets.QLabel(parent=self.horizontalLayoutWidget)
        self.label_18.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_18.setObjectName("label_18")
        self.horizontalLayout_15.addWidget(self.label_18)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_15.addItem(spacerItem3)
        self.missing_files_readoutcount = QtWidgets.QLCDNumber(parent=self.horizontalLayoutWidget)
        self.missing_files_readoutcount.setSegmentStyle(QtWidgets.QLCDNumber.SegmentStyle.Flat)
        self.missing_files_readoutcount.setObjectName("missing_files_readoutcount")
        self.horizontalLayout_15.addWidget(self.missing_files_readoutcount)
        self.show_report_txt_ProgramBtnType = QtWidgets.QPushButton(parent=self.MainProgramSubContainer)
        self.show_report_txt_ProgramBtnType.setEnabled(False)
        self.show_report_txt_ProgramBtnType.setGeometry(QtCore.QRect(160, 340, 171, 31))
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/whiteicons/icons/light/file-text.svg"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.show_report_txt_ProgramBtnType.setIcon(icon10)
        self.show_report_txt_ProgramBtnType.setObjectName("show_report_txt_ProgramBtnType")
        self.label_19 = QtWidgets.QLabel(parent=self.MainProgramSubContainer)
        self.label_19.setGeometry(QtCore.QRect(10, 90, 131, 21))
        self.label_19.setObjectName("label_19")
        self.list1 = QtWidgets.QListWidget(parent=self.MainProgramSubContainer)
        self.list1.setGeometry(QtCore.QRect(10, 30, 381, 51))
        self.list1.setAutoFillBackground(True)
        self.list1.setStyleSheet("")
        self.list1.setObjectName("list1")
        self.target_user_tip = QtWidgets.QTextBrowser(parent=self.MainProgramSubContainer)
        self.target_user_tip.setGeometry(QtCore.QRect(10, 110, 381, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.target_user_tip.sizePolicy().hasHeightForWidth())
        self.target_user_tip.setSizePolicy(sizePolicy)
        self.target_user_tip.setObjectName("target_user_tip")
        self.label_20 = QtWidgets.QLabel(parent=self.MainProgramSubContainer)
        self.label_20.setGeometry(QtCore.QRect(10, 10, 151, 21))
        self.label_20.setObjectName("label_20")
        self.pushButton_3_ProgramBtnType = QtWidgets.QPushButton(parent=self.MainProgramSubContainer)
        self.pushButton_3_ProgramBtnType.setEnabled(False)
        self.pushButton_3_ProgramBtnType.setGeometry(QtCore.QRect(10, 170, 301, 31))
        self.pushButton_3_ProgramBtnType.setObjectName("pushButton_3_ProgramBtnType")
        self.pushButton_2_ProgramBtnType = QtWidgets.QPushButton(parent=self.MainProgramSubContainer)
        self.pushButton_2_ProgramBtnType.setGeometry(QtCore.QRect(400, 30, 81, 21))
        self.pushButton_2_ProgramBtnType.setObjectName("pushButton_2_ProgramBtnType")
        self.horizontalLayoutWidget_3 = QtWidgets.QWidget(parent=self.MainProgramSubContainer)
        self.horizontalLayoutWidget_3.setGeometry(QtCore.QRect(330, 170, 121, 31))
        self.horizontalLayoutWidget_3.setObjectName("horizontalLayoutWidget_3")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_3)
        self.horizontalLayout_16.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.feedback_led = QtWidgets.QLabel(parent=self.horizontalLayoutWidget_3)
        self.feedback_led.setMaximumSize(QtCore.QSize(25, 25))
        self.feedback_led.setText("")
        self.feedback_led.setTextFormat(QtCore.Qt.TextFormat.PlainText)
        self.feedback_led.setPixmap(QtGui.QPixmap(":/LEDs/PngIcons/blue-led-on.png"))
        self.feedback_led.setScaledContents(True)
        self.feedback_led.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.feedback_led.setObjectName("feedback_led")
        self.horizontalLayout_16.addWidget(self.feedback_led)
        self.test_status_text = QtWidgets.QLabel(parent=self.horizontalLayoutWidget_3)
        self.test_status_text.setObjectName("test_status_text")
        self.horizontalLayout_16.addWidget(self.test_status_text)
        self.list2 = QtWidgets.QListWidget(parent=self.MainProgramSubContainer)
        self.list2.setGeometry(QtCore.QRect(10, 110, 381, 51))
        self.list2.setAutoFillBackground(True)
        self.list2.setStyleSheet("")
        self.list2.setObjectName("list2")
        self.pushButton_5_ProgramBtnType = QtWidgets.QPushButton(parent=self.MainProgramSubContainer)
        self.pushButton_5_ProgramBtnType.setGeometry(QtCore.QRect(400, 60, 81, 21))
        self.pushButton_5_ProgramBtnType.setObjectName("pushButton_5_ProgramBtnType")
        self.pushButton_4_ProgramBtnType = QtWidgets.QPushButton(parent=self.MainProgramSubContainer)
        self.pushButton_4_ProgramBtnType.setGeometry(QtCore.QRect(400, 110, 81, 21))
        self.pushButton_4_ProgramBtnType.setObjectName("pushButton_4_ProgramBtnType")
        self.ref_user_tip = QtWidgets.QTextBrowser(parent=self.MainProgramSubContainer)
        self.ref_user_tip.setEnabled(True)
        self.ref_user_tip.setGeometry(QtCore.QRect(10, 30, 381, 61))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ref_user_tip.sizePolicy().hasHeightForWidth())
        self.ref_user_tip.setSizePolicy(sizePolicy)
        self.ref_user_tip.setObjectName("ref_user_tip")
        self.list2.raise_()
        self.list1.raise_()
        self.pushButton_6_ProgramBtnType.raise_()
        self.groupBox.raise_()
        self.label_19.raise_()
        self.label_20.raise_()
        self.pushButton_3_ProgramBtnType.raise_()
        self.pushButton_2_ProgramBtnType.raise_()
        self.horizontalLayoutWidget_3.raise_()
        self.pushButton_5_ProgramBtnType.raise_()
        self.pushButton_4_ProgramBtnType.raise_()
        self.ref_user_tip.raise_()
        self.target_user_tip.raise_()
        self.show_report_txt_ProgramBtnType.raise_()
        self.horizontalLayout_17.addWidget(self.MainProgramSubContainer)
        self.horizontalLayout_18.addWidget(self.widget_2)
        self.verticalLayout_16.addWidget(self.mainProgramContainer)
        self.mainContentPagesStack.addWidget(self.homePage)
        self.dataPage = QtWidgets.QWidget()
        self.dataPage.setStyleSheet("")
        self.dataPage.setObjectName("dataPage")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.dataPage)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.label_11 = QtWidgets.QLabel(parent=self.dataPage)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_11.setFont(font)
        self.label_11.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.verticalLayout_17.addWidget(self.label_11)
        self.mainContentPagesStack.addWidget(self.dataPage)
        self.reportPage = QtWidgets.QWidget()
        self.reportPage.setObjectName("reportPage")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.reportPage)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.label_12 = QtWidgets.QLabel(parent=self.reportPage)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.label_12.setFont(font)
        self.label_12.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_18.addWidget(self.label_12)
        self.mainContentPagesStack.addWidget(self.reportPage)
        self.verticalLayout_15.addWidget(self.mainContentPagesStack)
        self.horizontalLayout_8.addWidget(self.mainContentsContainer)
        self.verticalLayout_10.addWidget(self.mainBodyContent)
        self.popupNotificationContainer = QtWidgets.QWidget(parent=self.mainBodyContainer)
        self.popupNotificationContainer.setObjectName("popupNotificationContainer")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.popupNotificationContainer)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.popupNotificationSubContainer = QtWidgets.QWidget(parent=self.popupNotificationContainer)
        self.popupNotificationSubContainer.setObjectName("popupNotificationSubContainer")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.popupNotificationSubContainer)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.popupNotificationHeaderContainer = QtWidgets.QWidget(parent=self.popupNotificationSubContainer)
        self.popupNotificationHeaderContainer.setObjectName("popupNotificationHeaderContainer")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.popupNotificationHeaderContainer)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_14 = QtWidgets.QLabel(parent=self.popupNotificationHeaderContainer)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_14.setFont(font)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_4.addWidget(self.label_14, 0, QtCore.Qt.AlignmentFlag.AlignLeft)
        self.notificationCloseBtn_UiBtnType = QtWidgets.QPushButton(parent=self.popupNotificationHeaderContainer)
        self.notificationCloseBtn_UiBtnType.setText("")
        self.notificationCloseBtn_UiBtnType.setIcon(icon8)
        self.notificationCloseBtn_UiBtnType.setIconSize(QtCore.QSize(24, 24))
        self.notificationCloseBtn_UiBtnType.setCheckable(False)
        self.notificationCloseBtn_UiBtnType.setObjectName("notificationCloseBtn_UiBtnType")
        self.horizontalLayout_4.addWidget(self.notificationCloseBtn_UiBtnType, 0, QtCore.Qt.AlignmentFlag.AlignRight)
        self.verticalLayout_20.addWidget(self.popupNotificationHeaderContainer)
        self.frame_9 = QtWidgets.QFrame(parent=self.popupNotificationSubContainer)
        self.frame_9.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_9.setObjectName("frame_9")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frame_9)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_13 = QtWidgets.QLabel(parent=self.frame_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_13.sizePolicy().hasHeightForWidth())
        self.label_13.setSizePolicy(sizePolicy)
        self.label_13.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_10.addWidget(self.label_13)
        self.verticalLayout_20.addWidget(self.frame_9)
        self.verticalLayout_19.addWidget(self.popupNotificationSubContainer)
        self.verticalLayout_10.addWidget(self.popupNotificationContainer)
        self.footerContainer = QtWidgets.QWidget(parent=self.mainBodyContainer)
        self.footerContainer.setObjectName("footerContainer")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.footerContainer)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setSpacing(0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.frame_10 = QtWidgets.QFrame(parent=self.footerContainer)
        self.frame_10.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame_10.setObjectName("frame_10")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.frame_10)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_15 = QtWidgets.QLabel(parent=self.frame_10)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_12.addWidget(self.label_15)
        self.horizontalLayout_11.addWidget(self.frame_10)
        self.sizeGrip = QtWidgets.QFrame(parent=self.footerContainer)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Preferred, QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizeGrip.sizePolicy().hasHeightForWidth())
        self.sizeGrip.setSizePolicy(sizePolicy)
        self.sizeGrip.setMinimumSize(QtCore.QSize(10, 10))
        self.sizeGrip.setMaximumSize(QtCore.QSize(40, 40))
        self.sizeGrip.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.sizeGrip.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.sizeGrip.setObjectName("sizeGrip")
        self.horizontalLayout_11.addWidget(self.sizeGrip)
        self.verticalLayout_10.addWidget(self.footerContainer)
        self.horizontalLayout.addWidget(self.mainBodyContainer)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.centerMenuPagesStack.setCurrentIndex(2)
        self.mainContentPagesStack.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.leftMenuBtn_UiBtnType.setToolTip(_translate("MainWindow", "Menu"))
        self.leftMenuBtn_UiBtnType.setText(_translate("MainWindow", "MENU"))
        self.homeBtn_UiBtnType.setToolTip(_translate("MainWindow", "Home"))
        self.homeBtn_UiBtnType.setText(_translate("MainWindow", "Home"))
        self.dataBtn_UiBtnType.setToolTip(_translate("MainWindow", "Data Analysis"))
        self.dataBtn_UiBtnType.setText(_translate("MainWindow", "Data Analysis"))
        self.reportBtn_UiBtnType.setToolTip(_translate("MainWindow", "Reports"))
        self.reportBtn_UiBtnType.setText(_translate("MainWindow", "Reports"))
        self.settingsBtn_UiBtnType.setToolTip(_translate("MainWindow", "Go to Settings"))
        self.settingsBtn_UiBtnType.setText(_translate("MainWindow", "Settings"))
        self.infoBtn_UiBtnType.setToolTip(_translate("MainWindow", "Information about the app"))
        self.infoBtn_UiBtnType.setText(_translate("MainWindow", "Information"))
        self.helpBtn_UiBtnType.setToolTip(_translate("MainWindow", "Get more help"))
        self.helpBtn_UiBtnType.setText(_translate("MainWindow", "Help"))
        self.label.setText(_translate("MainWindow", "MORE MENU"))
        self.centerMenuCloseBtn_UiBtnType.setToolTip(_translate("MainWindow", "Close Menu"))
        self.label_2.setText(_translate("MainWindow", "Settings"))
        self.label_16.setText(_translate("MainWindow", "Set Theme"))
        self.themesListSelector.setItemText(0, _translate("MainWindow", "default"))
        self.themesListSelector.setItemText(1, _translate("MainWindow", "trees"))
        self.label_4.setText(_translate("MainWindow", "Help"))
        self.label_3.setText(_translate("MainWindow", "Information"))
        self.label_6.setText(_translate("MainWindow", "BACKUP INSPECTOR 2023"))
        self.uiThemeBtn_UiBtnType.setToolTip(_translate("MainWindow", "Profile"))
        self.label_10.setText(_translate("MainWindow", "Home"))
        self.pushButton_6_ProgramBtnType.setText(_translate("MainWindow", "Delete Folder"))
        self.label_17.setText(_translate("MainWindow", "Reference Files Scanned"))
        self.label_18.setText(_translate("MainWindow", "Files Missing From Target Dir"))
        self.show_report_txt_ProgramBtnType.setText(_translate("MainWindow", "SHOW REPORT AS TXT FILE"))
        self.label_19.setText(_translate("MainWindow", "TARGET DIRECTORY(S)"))
        self.target_user_tip.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_20.setText(_translate("MainWindow", "REFERENCE DIRECTORY(S)"))
        self.pushButton_3_ProgramBtnType.setText(_translate("MainWindow", "RUN BACKUPINSPECTOR"))
        self.pushButton_2_ProgramBtnType.setText(_translate("MainWindow", "Add Folder"))
        self.test_status_text.setText(_translate("MainWindow", "TEST: NOT RUN"))
        self.pushButton_5_ProgramBtnType.setText(_translate("MainWindow", "Delete Folder"))
        self.pushButton_4_ProgramBtnType.setText(_translate("MainWindow", "Add Folder"))
        self.ref_user_tip.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.label_11.setText(_translate("MainWindow", "Data Analysis"))
        self.label_12.setText(_translate("MainWindow", "Reports"))
        self.label_14.setText(_translate("MainWindow", "Notification"))
        self.notificationCloseBtn_UiBtnType.setToolTip(_translate("MainWindow", "Close notification"))
        self.label_13.setText(_translate("MainWindow", "Notification Message"))
        self.label_15.setText(_translate("MainWindow", "Copyright ©  BACKUPDETECTIVE LTD. 2023 - All Rights Reserved"))

# Separation between UI and custom code

# Close the splash screen.
import pyi_splash
pyi_splash.close()

import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QFileDialog
from PyQt6.QtGui import QIcon, QPixmap
from PyQt6.QtCore import QPropertyAnimation, QEasingCurve 
from PyQt6 import uic
import resources_rc
import os

from PyQt6 import uic
from PyQt6.QtWidgets import QFileDialog, QListWidgetItem, QApplication, QMainWindow
from PyQt6.QtGui import QPixmap
import shutil



#%% - Backend 
import os
import datetime
import subprocess

def file_generator(directory):
    for root, dirs, files in os.walk(directory):
        for file in files:
            #yield os.path.join(root, file)  # Yield the full file path
            yield file  # Yield only the filename

def compare_directories(reference_dirs, target_dirs):
    set1 = set()
    set2 = set()
    set_dir1 = set()  # Initialize set for directory paths
    set_dir2 = set()  # Initialize set for directory paths

    for dir1 in reference_dirs:
        gen1 = file_generator(dir1)
        for file1 in gen1:
            set1.add(os.path.basename(file1))  # Add only the filename to set1
            set_dir1.add(file1)  # Add the full path to set_dir1

    for dir2 in target_dirs:
        gen2 = file_generator(dir2)
        for file2 in gen2:
            set2.add(os.path.basename(file2))  # Add only the filename to set2
            set_dir2.add(file2)  # Add the full path to set_dir2


    files_scanned_in_dir1 = len(set1)
    files_scanned_in_dir2 = len(set2)
    files_only_in_dir1 = len(set1 - set2)
    files_only_in_dir2 = len(set2 - set1)
    perfect_matches = len(set1 & set2)

    percent_matched_dir1 = (perfect_matches / files_scanned_in_dir2) * 100
    percent_matched_dir2 = (perfect_matches / files_scanned_in_dir1) * 100

    return (
        files_scanned_in_dir1,
        files_scanned_in_dir2,
        perfect_matches,
        files_only_in_dir1,
        files_only_in_dir2,
        percent_matched_dir1,
        percent_matched_dir2,
        set1,
        set2,
        set_dir1,
        set_dir2
        )


def resource_path(relative_path):
    """ Get the absolute path to a resource, works for dev and for PyInstaller """
    base_path = getattr(sys, '_MEIPASS', os.path.dirname(os.path.abspath(__file__)))
    return os.path.join(base_path, relative_path)


# Load the UI file
Form = Ui_MainWindow #("interface.ui")
app = QApplication([])

## MAIN WINDOW CLASS
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Form()
        self.ui.setupUi(self)
        self.check_preferences()
        self.setWindowTitle("BackupInspector")             # set name for window in taskbar and title bar
        self.setWindowIcon(QIcon(resource_path(r"Icons\BackupInspectorIcon.png")))   # add icon to window

        # Left Menu
        self.left_menu_animation = QPropertyAnimation(self.ui.leftMenuContainer, b"maximumWidth")
        self.left_menu_animation.setEasingCurve(QEasingCurve.Type.InOutQuart)
        self.left_menu_animation.setDuration(1000)  # Animation duration in milliseconds
        self.ui.leftMenuBtn_UiBtnType.clicked.connect(self.expandorshrink_left_menu)
        self.highlightedLeftMenuBtn = self.ui.homeBtn_UiBtnType
        self.ui.leftMenuContainer.setMaximumWidth(50)   # start with left menu shrunk by setting max width to 50

        self.ui.homeBtn_UiBtnType.clicked.connect(lambda: self.handle_left_menu(page=self.ui.homePage, button=self.ui.homeBtn_UiBtnType))
        self.ui.reportBtn_UiBtnType.clicked.connect(lambda: self.handle_left_menu(page=self.ui.reportPage, button=self.ui.reportBtn_UiBtnType))
        self.ui.dataBtn_UiBtnType.clicked.connect(lambda: self.handle_left_menu(page=self.ui.dataPage, button=self.ui.dataBtn_UiBtnType))
        self.ui.settingsBtn_UiBtnType.clicked.connect(lambda: self.handle_centre_menu(page=self.ui.settingsCenterMenuPage))
        self.ui.infoBtn_UiBtnType.clicked.connect(lambda: self.handle_centre_menu(page=self.ui.infoCenterMenuPage))
        self.ui.helpBtn_UiBtnType.clicked.connect(lambda: self.handle_centre_menu(page=self.ui.helpCenterMenuPage))

        # Center Menu
        self.center_menu_animation = QPropertyAnimation(self.ui.centerMenuContainer, b"maximumWidth")
        self.center_menu_animation.setEasingCurve(QEasingCurve.Type.InOutQuart)
        self.center_menu_animation.setDuration(1000)  # Animation duration in milliseconds
        self.ui.centerMenuCloseBtn_UiBtnType.clicked.connect(lambda: self.run_animation(self.center_menu_animation, start=250, end=5))
        self.ui.centerMenuContainer.setMaximumWidth(5)         # Set centre menu to start hidden (with max width of 0)   

        
        # Notification Container
        self.notification_animation = QPropertyAnimation(self.ui.popupNotificationContainer, b"maximumHeight")
        self.notification_animation.setEasingCurve(QEasingCurve.Type.InOutQuart)
        self.notification_animation.setDuration(1000)
        self.ui.notificationCloseBtn_UiBtnType.clicked.connect(lambda: self.run_animation(self.notification_animation, start=100, end=0))
        self.ui.popupNotificationContainer.setMaximumHeight(0)  # Set notification container to start hidden (with max height of 0)

        # ui theme dark / light
        self.dark_mode_path = resource_path(fr"themes\{self.current_theme}\dark_mode.css")
        self.light_mode_path = resource_path(fr"themes\{self.current_theme}\light_mode.css")
        self.current_ui_mode = "dark"
        self.highlight_theme_color = "background-color: #1f232a;"
        self.ui.uiThemeBtn_UiBtnType.clicked.connect(self.switch_ui_mode)
        self.init_icons()
        self.set_theme()

        ### SETTINGS PAGE
        self.ui.themesListSelector.currentTextChanged.connect(self.set_theme)

        self.init_program()

    def init_program(self):
        
        self.selected_directories1 = []
        self.selected_directories2 = []

        self.list1 = self.ui.list1
        self.list2 = self.ui.list2

        self.ui.pushButton_2_ProgramBtnType.clicked.connect(self.add_folder)
        self.ui.pushButton_3_ProgramBtnType.clicked.connect(self.run_backupinspector)
        self.ui.pushButton_4_ProgramBtnType.clicked.connect(self.add_folder2)
        self.ui.pushButton_5_ProgramBtnType.clicked.connect(self.delete_folder)
        self.ui.pushButton_6_ProgramBtnType.clicked.connect(self.delete_folder2)

        self.ui.show_report_txt_ProgramBtnType.clicked.connect(self.show_results_txt)
        #self.ui.copy_all_missing_files_button_ProgramBtnType.clicked.connect(self.copy_all_missing_files)

        self.ICON_RED_LED = QPixmap(resource_path(r"Icons\LEDs\led-red-on.png"))
        self.ICON_BLUE_LED = QPixmap(resource_path(r"Icons\LEDs\blue-led-on.png"))
        self.ICON_GREEN_LED = QPixmap(resource_path(r"Icons\LEDs\green-led-on.png"))

        self.tiparrow = QPixmap("Icons/arrowtip.png")
        self.notiparrow = QPixmap()



    def init_icons(self):
        
        self.iconw = QIcon()
        self.iconb = QIcon()
        self.iconw.addPixmap(QPixmap(":/whiteicons/icons/light/align-justify.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.iconb.addPixmap(QPixmap(":/blackicons/icons/dark/align-justify.svg"), QIcon.Mode.Normal, QIcon.State.Off)

        self.icon1w = QIcon()
        self.icon1b = QIcon()
        self.icon1w.addPixmap(QPixmap(":/whiteicons/icons/light/home.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.icon1b.addPixmap(QPixmap(":/blackicons/icons/dark/home.svg"), QIcon.Mode.Normal, QIcon.State.Off)

        self.icon2sw = QIcon()
        self.icon2sb = QIcon()
        self.icon2sw.addPixmap(QPixmap(":/whiteicons/icons/light/trending-up.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.icon2sb.addPixmap(QPixmap(":/blackicons/icons/dark/trending-up.svg"), QIcon.Mode.Normal, QIcon.State.Off)

        self.icon2w = QIcon()
        self.icon2b = QIcon()
        self.icon2w.addPixmap(QPixmap(":/whiteicons/icons/light/printer.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.icon2b.addPixmap(QPixmap(":/blackicons/icons/dark/printer.svg"), QIcon.Mode.Normal, QIcon.State.Off)

        self.icon3w = QIcon()
        self.icon3b = QIcon()
        self.icon3w.addPixmap(QPixmap(":/whiteicons/icons/light/settings.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.icon3b.addPixmap(QPixmap(":/blackicons/icons/dark/settings.svg"), QIcon.Mode.Normal, QIcon.State.Off)

        self.icon4w = QIcon()
        self.icon4b = QIcon()
        self.icon4w.addPixmap(QPixmap(":/whiteicons/icons/light/info.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.icon4b.addPixmap(QPixmap(":/blackicons/icons/dark/info.svg"), QIcon.Mode.Normal, QIcon.State.Off)

        self.icon5w = QIcon()
        self.icon5b = QIcon()
        self.icon5w.addPixmap(QPixmap(":/whiteicons/icons/light/help-circle.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.icon5b.addPixmap(QPixmap(":/blackicons/icons/dark/help-circle.svg"), QIcon.Mode.Normal, QIcon.State.Off)

        self.icon6w = QIcon()
        self.icon6b = QIcon()
        self.icon6w.addPixmap(QPixmap(":/whiteicons/icons/light/x-circle.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.icon6b.addPixmap(QPixmap(":/blackicons/icons/dark/x-circle.svg"), QIcon.Mode.Normal, QIcon.State.Off)

        self.icon7w = QIcon()
        self.icon7b = QIcon()
        self.icon7w.addPixmap(QPixmap(":/whiteicons/icons/light/more-horizontal.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.icon7b.addPixmap(QPixmap(":/blackicons/icons/dark/more-horizontal.svg"), QIcon.Mode.Normal, QIcon.State.Off)

        self.icon8w = QIcon()
        self.icon8b = QIcon()
        self.icon8w.addPixmap(QPixmap(":/whiteicons/icons/light/sun.svg"), QIcon.Mode.Normal, QIcon.State.Off)
        self.icon8b.addPixmap(QPixmap(":/blackicons/icons/dark/moon.svg"), QIcon.Mode.Normal, QIcon.State.Off)

    def set_icons_white(self):
        self.ui.leftMenuBtn_UiBtnType.setIcon(self.iconw)
        self.ui.homeBtn_UiBtnType.setIcon(self.icon1w)
        self.ui.dataBtn_UiBtnType.setIcon(self.icon2sw)
        self.ui.reportBtn_UiBtnType.setIcon(self.icon2w)
        self.ui.settingsBtn_UiBtnType.setIcon(self.icon3w)
        self.ui.infoBtn_UiBtnType.setIcon(self.icon4w)
        self.ui.helpBtn_UiBtnType.setIcon(self.icon5w)
        self.ui.centerMenuCloseBtn_UiBtnType.setIcon(self.icon6w)
        self.ui.notificationCloseBtn_UiBtnType.setIcon(self.icon6w)

    def set_icons_black(self):
        self.ui.leftMenuBtn_UiBtnType.setIcon(self.iconb)
        self.ui.homeBtn_UiBtnType.setIcon(self.icon1b)
        self.ui.dataBtn_UiBtnType.setIcon(self.icon2sb)
        self.ui.reportBtn_UiBtnType.setIcon(self.icon2b)
        self.ui.settingsBtn_UiBtnType.setIcon(self.icon3b)
        self.ui.infoBtn_UiBtnType.setIcon(self.icon4b)
        self.ui.helpBtn_UiBtnType.setIcon(self.icon5b)
        self.ui.centerMenuCloseBtn_UiBtnType.setIcon(self.icon6b)
        self.ui.notificationCloseBtn_UiBtnType.setIcon(self.icon6b)

    def check_preferences(self):
        # set the default theme to the one saved in the startup_theme.txt file if it exists otherwqise set it to default
        if os.path.exists("startup_theme.txt"):
            with open("startup_theme.txt", "r") as file:
                self.current_theme = file.read()
                self.ui.themesListSelector.setCurrentText(self.current_theme)     
        else:
            self.current_theme = "default"

    def run_animation(self, animation_item, start, end):
        animation_item.setStartValue(start)
        animation_item.setEndValue(end)
        animation_item.start()

    def handle_left_menu(self, page, button):
        # set the correct button to be highlighted using background-color: #1f232a; in stylesheet from the previous to the new page
        self.highlightedLeftMenuBtn.setStyleSheet("")
        self.highlightedLeftMenuBtn = button
        self.highlightedLeftMenuBtn.setStyleSheet(self.highlight_theme_color)

        # set the correct page to be displayed in mainContentPagesStack
        self.ui.mainContentPagesStack.setCurrentWidget(page)

    def expandorshrink_left_menu(self):
        # If the left menu is closed (width = 40), then it is opened
        if self.ui.leftMenuContainer.maximumWidth() == 50:
            self.run_animation(self.left_menu_animation, start=50, end=250)
        else:
            self.run_animation(self.left_menu_animation, start=250, end=50)

    def handle_centre_menu(self, page):
        # If the center menu is closed (width = 5), then it is opened
        if self.ui.centerMenuContainer.maximumWidth() == 5:
            self.run_animation(self.center_menu_animation, start=5, end=250)
        
        # The correct center menu page is set for centerMenuPagesStack
        self.ui.centerMenuPagesStack.setCurrentWidget(page)

    def set_theme(self):
        '''Sets the theme of the UI based on the selected theme in the themesListSelector'''

        # Get the selected theme from the themesListSelector
        selected_theme = self.ui.themesListSelector.currentText()

        # Set the current theme to the selected theme
        self.current_theme = selected_theme

        self.dark_mode_path = resource_path(fr"themes\{self.current_theme}\dark_mode.css")
        self.light_mode_path = resource_path(fr"themes\{self.current_theme}\light_mode.css")

        #switch to the new css based on the previos mode i.e dark/light
        if self.current_ui_mode == "dark":
            with open(self.dark_mode_path, "r") as file:
                self.setStyleSheet(file.read())
        else:
            with open(self.light_mode_path, "r") as file:
                self.setStyleSheet(file.read())

        # Save the current theme to the startup_theme.txt file
        with open("startup_theme.txt", "w") as file:
            file.write(self.current_theme)

    def switch_ui_mode(self):
        if self.current_ui_mode == "light":
            with open(self.dark_mode_path, "r") as file:
                self.setStyleSheet(file.read())
            self.current_ui_mode = "dark"
            self.highlight_theme_color = "background-color: #1f232a;"
            self.highlightedLeftMenuBtn.setStyleSheet(self.highlight_theme_color)
            self.set_icons_white()

        elif self.current_ui_mode == "dark":
            with open(self.light_mode_path, "r") as file:
                self.setStyleSheet(file.read())
            self.current_ui_mode = "light"
            self.highlight_theme_color = "background-color: #e4e7ec;"
            self.highlightedLeftMenuBtn.setStyleSheet(self.highlight_theme_color)
            self.set_icons_black()



    ### PROGRAM FUNCTIONS ###
    def update_list1(self):
        self.list1.clear()
        for directory in self.selected_directories1:
            item = QListWidgetItem(directory)
            self.list1.addItem(item)
        self.change_run_button_state()
        self.change_user_tip_status_1()

    def update_list2(self):
        self.list2.clear()
        for directory in self.selected_directories2:
            item = QListWidgetItem(directory)
            self.list2.addItem(item)
        self.change_run_button_state()
        self.change_user_tip_status_2()

    def add_folder(self):
        directory = QFileDialog.getExistingDirectory(self, "Select Directories")
        if directory:
            self.selected_directories1.append(directory)
            self.update_list1()

    def add_folder2(self):
        directory = QFileDialog.getExistingDirectory(self, "Select Directories")
        if directory:
            self.selected_directories2.append(directory)
            self.update_list2()

    def delete_folder(self):
        for item in self.list1.selectedItems():
            self.selected_directories1.remove(item.text())
            self.list1.takeItem(self.list1.row(item))
        self.change_run_button_state()
        self.change_user_tip_status_1()

    def delete_folder2(self):
        for item in self.list2.selectedItems():
            self.selected_directories2.remove(item.text())
            self.list2.takeItem(self.list2.row(item))
        self.change_run_button_state()
        self.change_user_tip_status_2()
    

    def change_user_tip_status_1(self):
        if self.selected_directories1:
            # move the QtextBrowser to the back layer
            self.ui.ref_user_tip.lower()
            # remove arrow from label pixmap by setting to no pixmap
            #self.ui.tip_arrow_1.setPixmap(self.notiparrow)
        else:
            # move the QtextBrowser to the front layer
            self.ui.ref_user_tip.raise_()
            # add arrow to label pixmap
            #self.ui.tip_arrow_1.setPixmap(self.tiparrow)

    def change_user_tip_status_2(self):
        if self.selected_directories2:
            # move the QtextBrowser to the back layer
            self.ui.target_user_tip.lower()
            # remove arrow from label pixmap
            #self.ui.tip_arrow_2.setPixmap(self.notiparrow)
        else:
            # move the QtextBrowser to the front layer
            self.ui.target_user_tip.raise_()
            # add arrow to label pixmap
            #self.ui.tip_arrow_2.setPixmap(self.tiparrow)

    # function to toggle led's state based on results
    def update_led(self):
        number = self.files_scanned_1 - self.num_perfect_matches
        if number == 0:
            self.ui.feedback_led.setPixmap(self.ICON_GREEN_LED)
        else:
            self.ui.feedback_led.setPixmap(self.ICON_RED_LED)

    def update_results(self):
        # update a qlcdnumber widgets with the number of files scanned
        self.ui.scanned_files_readoutcount.display(self.files_scanned_1)
        self.ui.missing_files_readoutcount.display(self.files_scanned_1 - self.num_perfect_matches)

        if self.files_scanned_1 - self.num_perfect_matches == 0:
            self.ui.test_status_text.setText("TEST: PASSED")
        else:
            self.ui.test_status_text.setText("TEST: FAILED")
        # enable the show report button
        self.ui.show_report_txt_ProgramBtnType.setEnabled(True)

    def show_results_txt(self):
        # find temp directory
        temp_dir = os.environ.get("TEMP")
        if temp_dir is None:
            temp_dir = os.environ.get("TMP")
        if temp_dir is None:
            temp_dir = os.environ.get("TMPDIR")
        if temp_dir is None:
            temp_dir = os.environ.get("TEMPDIR")
        if temp_dir is None:
            temp_dir = os.getcwd() # current working directory as fallback

        # Create a text file to write the results
        file_path = f'{temp_dir}\BackupInspector_results_{datetime.datetime.now().strftime("%d-%m-%Y")}.txt'

        with open(file_path, "w", encoding="utf-8") as f:
            # Write the title of the file as BACKUPINSPECTOR RESULTS
            f.write("BACKUPINSPECTOR RESULTS\n")

            # Add the date and time of the scan
            f.write(f"Scan date: {datetime.datetime.now()}\n")

            # Write the number of files scanned in total for the refrence dirs (dir1)
            f.write(f"\nFiles scanned in refrence dirs: {self.files_scanned_1}\n")

            # Write the number of files scanned in total for the target dirs (dir2)
            f.write(f"Files scanned in target dirs: {self.files_scanned_2}\n")

            # Write the number of perfect matches
            f.write(f"Number of perfect matches: {self.num_perfect_matches}\n")

            # Write number of files in refrence dirs (dir1) that are not in target dirs (dir2)
            f.write(f"Files in reference not in target: {self.num_files_only_in_dir1}\n")

            # Write number of files in target dirs (dir2) that are not in refrence dirs (dir1)
            f.write(f"Files in target not in reference: {self.num_files_only_in_dir2}\n\n\n")


            # Write list of the file names of the files that are only in dir1
            f.write("\n### Files missing from Target:\n")
            for file in self.set1 - self.set2:
                f.write(f"\n# {file}\n")
            """
            # Write list of the file names of the files that are only in dir2
            f.write("\nFiles only in dir2:\n")
            for file in set2 - set1:
                f.write(f"\n# {file}\n")
            """

        # Open the file in Notepad 
        subprocess.Popen(["notepad.exe", file_path])   # Subprocess so as not to block the rest of the program



    # function to copy all missing files to target
    def copy_all_missing_files(self):
        missing_files = self.set1 - self.set2

        # find the corresponding file in set_dir1
        for file in missing_files:
            for file_path in self.set_dir1:
                if file == os.path.basename(file_path):
                    # find the corresponding target directory by checking if the file_path contains any of the the selected directoies in self.selected_directories2
                    for target_dir in self.selected_directories2:
                        if target_dir in file_path:
                            # copy file to target directory
                            shutil.copy(file_path, target_dir)
                            print(f"{file_path} copied to {target_dir}")
                            break  
                        else:
                            print(f"Could not find target directory {target_dir} for {file_path}")

    def change_run_button_state(self):
        if self.selected_directories1 and self.selected_directories2:
            self.ui.pushButton_3_ProgramBtnType.setEnabled(True)
        else:
            self.ui.pushButton_3_ProgramBtnType.setEnabled(False)


    def run_backupinspector(self):
        reference_dirs = self.selected_directories1
        target_dirs = self.selected_directories2
        self.files_scanned_1, self.files_scanned_2, self.num_perfect_matches, self.num_files_only_in_dir1, self.num_files_only_in_dir2, self.percent_matched_dir1, self.percent_matched_dir2, self.set1, self.set2, self.set_dir1, self.set_dir2 = compare_directories(reference_dirs, target_dirs)
        
        self.update_led()
        self.update_results()



if __name__ == "__main__":
    window = MainWindow()
    window.show()
    sys.exit(app.exec())



